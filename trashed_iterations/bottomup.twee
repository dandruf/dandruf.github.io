/* SPECIFIC TO MY SETUP: from prototype work folder, run: ../tweego/tweego -o compiled/bottomup.html src */

:: StoryTitle
Bottom Up: Prototype 2 for Teaching Purposes

:: StoryData
{
  "ifid": "EB95DC0D-B1A3-42C0-A187-19ED577B8AC8",
  "format": "SugarCube",
  "format-version": "2.30.0",
  "start": "Start",
  "zoom": 1
}

:: StoryInit
/* Create data map of all story locations and associated sound files */
<<set $pointsOfInterest to {
	"Graduate School of Education":  {
		lat: 42.375358,
		long: -71.121691,
    audioPath: "../audio/levelup.mp3",
    transcript: "We start our journey here, at the Graduate School of Education."
	},
  "Agassiz Theater":  {
		lat: 42.3760466,
		long: -71.1236329,
    audioPath: "../audio/allston.m4a",
    transcript: "This building holds the Agassiz Theater, also known as 'The Ag.' I've spent too much time here. There's a ghost on the top floor. What else do I know about this place? Hmm. Watch Natasha, Pierre, and The Great Comet!"
	},
  "Sunken Garden":  {
		lat: 42.3757343,
		long: -71.1224232,
    audioPath: "../audio/hbs.mp3",
    transcript: "Welcome to the Sunken Garden"
	}
}>>

<<set $startingLocation to "Graduate School of Education">>

/* Loop through data map and cache all audio,
naming it by the location key name in the map */
<<for _key range Object.keys($pointsOfInterest)>>
  <<cacheaudio $pointsOfInterest[_key].audioPath $pointsOfInterest[_key].audioPath>>  
<</for>>

/* hide the reset bar on the side */
<<run UIBar.stow()>>

:: Start 
Hello! Please put your headphones into your device and select "Let's go!" when you're ready.
[[Let's go!]]


:: Let's go!
Welcome to my personal map! I'm Jasmyne. Today, I'm going to share a few places around Harvard's campus that are special to me. 

If you're able to walk around and navigate to the locations I mention, click on the link that says "Find my Location." Please make sure that your location is turned on.

Otherwise, you can select "Don't use my location" and select the location you want to learn about without travelling there.

If you change your mind about which setting you want to be on, select the arrow on the left side of your screen and press "Restart."

[[Use my location| Travel to Location][$isLocationOn to true]], or [[Don't use my location| Travel to Location][$isLocationOn to false]]?


:: Travel to Location
<<masteraudio stop>>   
<<if $isLocationOn == true>>
  <<script>>getLocation();<</script>>
  <<goto [[Find my Location]]>>
<<else>>
  <<goto [[Display all locations]]>>
<</if>>

/* Logic for tracking locations */
:: Find my Location
Let's see where you are. Hmm...
<<nobr>>
  /* My savior: https://qjzhvmqlzvoo5lqnrvuhmg.on.drv.tw/UInv/Sample_Code.html#Geolocation%20Access */
  /* Load until location gets updated. Need to split location access and location usage 
     because geolocation is an asynchronous function.  */
  <<if $Location.lat == 0>>
    <<goto [[Find my Location]]>>
  <</if>>
  <<set $match to "None">>
  <<for _key range Object.keys($pointsOfInterest)>>
    <<if approxEqual($Location.lat, $pointsOfInterest[_key].lat)>>
      <<if approxEqual($Location.long, $pointsOfInterest[_key].long)>>
        Matching _key!
        <<set $match to _key>>
        <<break>>
      <</if>>
    <</if>>
  <</for>>

  <<if $match == "None">>
    It looks like you're not close to any of the locations I want to share with you.
    Why don't you navigate to my first place of interest, <<print $startingLocation>>, and then [[try again|Find my Location]]?
  <<else>>
    It looks like you're close to _key.
    [[Learn more about this location| _key]], or [[try again| Travel to Location]]?
  <</if>>
<</nobr>>


/* Logic for not tracking locations */
:: Display all locations
Which place do you want to explore?
<<nobr>>
  <ul>
    <<for _key range Object.keys($pointsOfInterest)>>
        <<set $place to _key + ": (latitude: " + $pointsOfInterest[_key].lat + ", longitude: " + $pointsOfInterest[_key].long + ")">>
      <li>
        [[$place | _key]]
      </li>
    <</for>>
  </ul>
<</nobr>>

:: Sunken Garden
<<set $location to "Sunken Garden">>
$location
Transcript: <<print $pointsOfInterest[$location].transcript>>

<<audio $pointsOfInterest[$location].audioPath play>>
<<link "Replay story">>
   <<masteraudio stop>>   
   <<audio $pointsOfInterest[$location].audioPath play>>
<</link>>
[[Explore other places | Travel to Location]]


:: Agassiz Theater
<<set $location to "Agassiz Theater">>
$location
Transcript: <<print $pointsOfInterest[$location].transcript>>

<<audio $pointsOfInterest[$location].audioPath play>>
<<link "Replay story">>
   <<masteraudio stop>>   
   <<audio $pointsOfInterest[$location].audioPath play>>
<</link>>
[[Explore other places | Travel to Location]]

:: Graduate School of Education
<<set $location to "Graduate School of Education">>
$location
Transcript: <<print $pointsOfInterest[$location].transcript>>

<<audio $pointsOfInterest[$location].audioPath play>>
<<link "Replay story">>
   <<masteraudio stop>>   
   <<audio $pointsOfInterest[$location].audioPath play>>
<</link>>
[[Explore other places | Travel to Location]]


:: StoryScript [script]
// initialization, on loop (ideally)
window.getLocation = function () {
  if ("geolocation" in navigator && typeof navigator.geolocation.getCurrentPosition === "function") {
  // setup the success and error callbacks as well as the options object
  var positionSuccess = function (position) {
    state.active.variables["Location"] = {
    lat : position.coords.latitude,
    long : position.coords.longitude
    };
    console.log(`Suceeded in getting location; lat: ${state.active.variables["Location"].lat} long: ${state.active.variables["Location"].long}`)
  },
  positionError = function (error) {
    console.log(`ERROR(${error}): ${error.message}`)
  },
  positionOptions = {
    timeout: 31000, // how long (in ms) can try to find location before aborting
    enableHighAccuracy: true,
    maximumAge: 0 // how old a saved location can be
  };

  state.active.variables["Location"] = { lat : 0, long : 0 };

  console.log("Trying to find location")
  // make a  call for a position
  navigator.geolocation.getCurrentPosition(
  positionSuccess,
  positionError,
  positionOptions
  );
}};
 
// (function approxEqual(a, b, allowedDiff) {
window.approxEqual = function (a, b, allowedDiff) { // allowedDiff must always be > 0
if (a === b) { // handles "exact" edge cases
return true;
}
allowedDiff = allowedDiff || 0.0005;
return Math.abs(a - b) < allowedDiff;
};